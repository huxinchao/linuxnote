1:Memory

1.1 Memory Address
----- ----- -----
Logical Address (segment, offset)
Linear Address (Virtual address)
Physical Address(CPU --[bus addr]--> mem)

Logical Address ->[ Segment Part] -> Linear Address -> [Page Part] --> Logical Address

in the mutli cpu's computer, will have a 'Memory Arbiter' in between bus and memory's core
in the single cpu's computer, because of DMA, it also need 'Memory Arbiter'

[Segment Part] have 'Real Mode' and 'Protected Mode' (usually 'Protected Mode')

----- ----- ----- 

'Segment Part' have to part : Segment Selector and offset
Segement Selector's organization: [15-Index-3][2-Table Indicator-2][1-Request Privilege Level-0]

RPL = Current Privilege Level ;; 0 -> 3 High->Low

----- ----- -----

Segement Descriptor

Segment Descriptor in GDT(Global Descriptor Table) or LDT(Local Descriptor Table)
usually only define a GDT, but every process if need itself's segment, it will create a GDT.
GDT's location and size storaged in [GDTR Control Register]
LDT's location and size storaged in [LDTR Control Register]

Segment Name 			Descripe
Base				first byte's linear address

G				particles's flag 0:4096

Limit				last byte's offset

S				System Flag, 0:system segment,storage LDT or something else, or it's 
				a normal code segment or data segment

Type				segment's type and r/w privilege

DPL   				Descriptor Privilege Level:for the limit
				0: Cpu can access
				3: Anyone can access

P				Segment Present 
				0:Don's exists in memory(maybe in disk)
				1:in memory
D/B				Data segment or Code Segemtn
AVL Flag			Can be used by OS, but ignore by Linux

----- ----- -----
Type

1: Code Segment Descriptor , can in GDT or LDT
2: Data Segment Descriptor , can in GDT or LDT
3: TSSD (Task Status Segment Descriptor), save registers's data, only in GDT
it's Type Segemnt's value can be set 11 or 9 depend on it's running on CPU

|63-Base-56|55-G-55|54-B-54|53-O-53|52-AVL-52|51-LIMIT-48|47-1-47|46-DPL-45|43-TYPE-40|39-BASE-32|
|31------------------BASE----------------------16|15----------------LIMIT-----------------------0|

LDTD means this segment descriptor include a LDT's segment, only appear in GDT.
it's Type segment will be set to 2, S will be set to 0.

----- ----- -----

Fast Access Segment Descriptor

For speed up the Logic Address to Linear Address, 80x86 CPU provide extend no-program registers work 
for normal register to use
When a Segment Selector in to register , the revelant Segment Descriptor in to the no-program register 
too !
only when the content change, it's need to access GDT or LDT.

Segment Selector's content

index			the entry of segment descriptor in the GDT or LDT
TI(Table Indictor)	In GDT(0) or LDT(1)
PRI			set the cpu's privilege(such as access the data segment)












